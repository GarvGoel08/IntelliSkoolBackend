openapi: 3.0.0
info:
  title: Vihaan API Documentation
  description: API documentation for the Vihaan application
  version: "1.0"
servers:
  - url: http://localhost:8080/api
paths:
  /user/signup:
    post:
      summary: User sign up
      description: User creates an account by providing name, email, password, and type.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                type:
                  type: string
      responses:
        200:
          description: User created successfully
        400:
          description: Bad request

  /user/login:
    post:
      summary: User login
      description: User logs in by providing email and password to get a token.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
        400:
          description: Invalid credentials

  /user/getUserDetail:
    get:
      summary: Get user details
      description: Get user details excluding password.
      operationId: getUserDetail
      security:
        - bearerAuth: []
      responses:
        200:
          description: User details retrieved
        401:
          description: Unauthorized

  /classrooms:
    post:
      summary: Create a classroom
      description: Create a classroom with a name, description, and class code.
      operationId: createClassroom
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                className:
                  type: string
                classDescription:
                  type: string
                classCode:
                  type: string
      responses:
        200:
          description: Classroom created successfully
        400:
          description: Bad request

  /classrooms/{id}:
    get:
      summary: Get classroom details
      description: Get details of a classroom by its ID.
      operationId: getClassroomById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Classroom details retrieved
        404:
          description: Classroom not found

  /classes:
    post:
      summary: Create a class
      description: Create a new class with meet code, duration, start time, and topic.
      operationId: createClass
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                classroomID:
                  type: string
                meetCode:
                  type: string
                duration:
                  type: integer
                startTime:
                  type: string
                  format: date-time
                topic:
                  type: string
      responses:
        200:
          description: Class created successfully
        400:
          description: Bad request

  /classes/{id}:
    get:
      summary: Get class details
      description: Get details of a class by its ID.
      operationId: getClassById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Class details retrieved
        404:
          description: Class not found

  /classes/{id}:
    delete:
      summary: Delete a class
      description: Delete a class by its ID.
      operationId: deleteClass
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Class deleted successfully
        404:
          description: Class not found

  /classrooms/{id}:
    delete:
      summary: Delete a classroom
      description: Delete a classroom by its ID.
      operationId: deleteClassroom
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Classroom deleted successfully
        404:
          description: Classroom not found

  /register:
    post:
      summary: Register a student for a classroom
      description: Register a student for a specific classroom.
      operationId: registerStudent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                classroomId:
                  type: string
      responses:
        200:
          description: Student registered successfully
        400:
          description: Bad request

  /register/{studentId}:
    get:
      summary: Get user's registrations
      description: Get all registrations of a specific student with populated classroom details.
      operationId: getUserRegistrations
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User's registrations retrieved successfully
        404:
          description: Student not found
  /ws:
    get:
      summary: WebSocket connection
      description: |
        Connect to the WebSocket server to receive real-time updates and send events.

        **Connection URL:** `ws://localhost:8080`

        **Events:**
        - `connect-room`: Join a specific room with `roomID` and `userID`.
          ```json
          {
            "roomID": "abc123",
            "userID": "user123"
          }
          ```

        - `ping`: Sent by the client to update attendance. No payload required.

        - `Quiz`: Sent by the client to emit a quiz.
          ```json
          {
            "question": "What is 2+2?",
            "options": ["2", "4", "6"]
          }
          ```

        - `Quiz` (receive): Server emits the quiz back to clients.

        - `Answer`: Sent by the client to give his answer.
          ```json
          {
            "answer": "4",
            "time_taken": 10
          }
          ```
      responses:
        101:
          description: Switching Protocols (WebSocket upgrade)


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
